"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Any, Dict, List, Optional, Union
from polywrap_core import Client, ClientConfig, Env, GetFileOptions, GetManifestOptions, IUriResolutionContext, IUriResolver, InvokerOptions, TryResolveUriOptions, Uri, UriPackageOrWrapper, Wrapper
from polywrap_manifest import AnyWrapManifest
from polywrap_result import Result

@dataclass(slots=True, kw_only=True)
class PolywrapClientConfig(ClientConfig):
    ...


class PolywrapClient(Client):
    _config: PolywrapClientConfig
    def __init__(self, config: Optional[PolywrapClientConfig] = ...) -> None:
        ...
    
    def get_config(self): # -> PolywrapClientConfig:
        ...
    
    def get_uri_resolver(self) -> IUriResolver:
        ...
    
    def get_envs(self) -> Dict[Uri, Env]:
        ...
    
    def get_interfaces(self) -> Dict[Uri, List[Uri]]:
        ...
    
    def get_implementations(self, uri: Uri) -> Result[Union[List[Uri], None]]:
        ...
    
    def get_env_by_uri(self, uri: Uri) -> Union[Env, None]:
        ...
    
    async def get_file(self, uri: Uri, options: GetFileOptions) -> Result[Union[bytes, str]]:
        ...
    
    async def get_manifest(self, uri: Uri, options: Optional[GetManifestOptions] = ...) -> Result[AnyWrapManifest]:
        ...
    
    async def try_resolve_uri(self, options: TryResolveUriOptions) -> Result[UriPackageOrWrapper]:
        ...
    
    async def load_wrapper(self, uri: Uri, resolution_context: Optional[IUriResolutionContext] = ...) -> Result[Wrapper]:
        ...
    
    async def invoke(self, options: InvokerOptions) -> Result[Any]:
        ...
    


